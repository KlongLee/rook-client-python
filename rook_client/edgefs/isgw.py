"""
This file is automatically generated.
Do not modify.
"""

try:
    from typing import Any, Optional, Union, List
except ImportError:
    pass

from .._helper import _omit, CrdObject, CrdObjectList, CrdClass

class Spec(CrdObject):
    _properties = [
        ('direction', 'direction', str, True, False),
        ('remoteURL', 'remoteURL', str, True, False)
    ]        

    def __init__(self,
                 direction,  # type: str
                 remoteURL,  # type: str
                 ):
        super(Spec, self).__init__(
        direction=direction,
        remoteURL=remoteURL,
        )

    @property
    def direction(self):
        # type: () -> str
        return self._property_impl('direction')
    
    @direction.setter
    def direction(self, new_val):
        # type: (str) -> None
        self._direction = new_val
    
    @property
    def remoteURL(self):
        # type: () -> str
        return self._property_impl('remoteURL')
    
    @remoteURL.setter
    def remoteURL(self, new_val):
        # type: (str) -> None
        self._remoteURL = new_val


class ISGW(CrdClass):
    _properties = [
        ('apiVersion', 'apiVersion', str, True, False),
        ('metadata', 'metadata', object, True, False),
        ('status', 'status', object, False, False),
        ('spec', 'spec', Spec, True, False)
    ]        

    def __init__(self,
                 apiVersion,  # type: str
                 metadata,  # type: Any
                 spec,  # type: Spec
                 status=_omit,  # type: Optional[Any]
                 ):
        super(ISGW, self).__init__(
        apiVersion=apiVersion,
        metadata=metadata,
        spec=spec,
        status=status,
        )

    @property
    def apiVersion(self):
        # type: () -> str
        return self._property_impl('apiVersion')
    
    @apiVersion.setter
    def apiVersion(self, new_val):
        # type: (str) -> None
        self._apiVersion = new_val
    
    @property
    def metadata(self):
        # type: () -> Any
        return self._property_impl('metadata')
    
    @metadata.setter
    def metadata(self, new_val):
        # type: (Any) -> None
        self._metadata = new_val
    
    @property
    def status(self):
        # type: () -> Any
        return self._property_impl('status')
    
    @status.setter
    def status(self, new_val):
        # type: (Optional[Any]) -> None
        self._status = new_val
    
    @property
    def spec(self):
        # type: () -> Spec
        return self._property_impl('spec')
    
    @spec.setter
    def spec(self, new_val):
        # type: (Spec) -> None
        self._spec = new_val
